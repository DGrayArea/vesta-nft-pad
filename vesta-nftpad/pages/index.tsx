import { ConnectButton } from "@rainbow-me/rainbowkit";
import type { NextPage } from "next";
import Head from "next/head";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { StandardMerkleTree } from "@openzeppelin/merkle-tree";
import axios from "axios";
import { useState } from "react";

// Generate random mock addresses
const mockAddresses = [
  ["0x6a399A396f03aEAB017430816eA07b2ae9836089", "1"],
  ["0xEA58145e3A2Ef37d2D2dFCBc8fD96f89e21f5Cbd", "1"],
  ["0x9131986Aa704DB8D76cDE861290f0422D65D26D6", "1"],
  ["0xd7E019ff706a66B3F8cBAe07957D869355845E5A", "1"],
  ["0x49359ef0f5F900d2dF0Ff5E0F3a5E14cAD04219d", "1"],
];

function generateMerkleRoot(addresses: typeof mockAddresses): string {
  const tree = StandardMerkleTree.of(addresses, ["address", "uint256"]);
  const root = tree.root;
  return root;
}

const Home: NextPage = () => {
  const merkleRoot = generateMerkleRoot(mockAddresses);

  const createCollection = async () => {
    const data = {
      name: "TEST",
      symbol: "TST",
      baseURI: "ipfs://tst",
      maxSupply: 4000,
      owner: "0x6a399A396f03aEAB017430816eA07b2ae9836089",
      rounds: [
        {
          startTime: 1732494632,
          endTime: 1732581032,
          price: "2000000000000000000",
          maxSupply: 50,
          merkleRoot,
          isWhitelistEnabled: true,
        },
      ],
      timestamp: Math.floor(Date.now() / 1000),
      networkish: "sepolia",
    };
    console.log(data);
    const response = await axios.post("http://localhost:3000/create", data);
    return response.data;
  };
  const [deployedAddress, setDeployedAddress] = useState("");
  const [loadedAddress, setLoadedAddress] = useState("");
  const [mintAmount, setMintAmount] = useState("");

  const loadAddress = async () => {
    setMintAmount("20");
    setLoadedAddress(deployedAddress);
  };

  const mint = async () => {};

  return (
    <div className="w-full min-h-screen flex flex-col items-center p-10">
      <Head>
        <title>RainbowKit App</title>
        <meta
          content="Generated by @rainbow-me/create-rainbowkit"
          name="description"
        />
        <link href="/favicon.ico" rel="icon" />
      </Head>

      <main className="flex flex-col justify-center">
        <ConnectButton />
        <div className="text-green-500 p-5 flex flex-col space-y-5">
          <Input
            placeholder="Enter Address"
            onChange={(e) => setDeployedAddress(e.currentTarget.value)}
          />

          <Button
            variant="secondary"
            className="active:scale-95 transition-all duration-75"
            onClick={loadAddress}
          >
            Load Address to Mint
          </Button>
        </div>

        <div>
          {!!loadedAddress && (
            <div className="text-green-500 p-5 flex flex-col space-y-5">
              <Input
                placeholder="Enter Mint Amount"
                onChange={(e) => setMintAmount(e.currentTarget.value)}
              />

              <Button
                variant="secondary"
                className="active:scale-95 transition-all duration-75"
                onClick={mint}
              >
                Mint
              </Button>
            </div>
          )}
        </div>
      </main>
    </div>
  );
};

export default Home;
